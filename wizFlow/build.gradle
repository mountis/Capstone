

apply plugin: 'com.android.application'

android {

    if (project.hasProperty("SIGN_PROPS")
            && new File(project.property("SIGN_PROPS").toString()).exists()) {
        Properties props = new Properties()
        props.load(new FileInputStream(file(project.property("SIGN_PROPS"))))
        signingConfigs {
            signConfig {
                storeFile file(props['keystore'])
                storePassword props['keystore.password']
                keyAlias props['keystore.alias']
                keyPassword props['keystore.alias.password']
            }
        }
    }

    compileSdkVersion Integer.parseInt(project.TARGET_SDK)
    buildToolsVersion project.BUILD_TOOLS

    defaultConfig {
        applicationId project.PACKAGE
        minSdkVersion project.MIN_SDK
        targetSdkVersion project.TARGET_SDK
        versionName project.VERSION_NAME
        versionCode Integer.parseInt(project.VERSION_CODE)
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
        multiDexEnabled true
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }

    buildTypes {
        debug {
            testCoverageEnabled false
        }
        release {
            minifyEnabled true
            shrinkResources false
            multiDexEnabled false
            testCoverageEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            android.applicationVariants.all { variant ->
                variant.outputs.all {
                    outputFileName = "WizFlow-${variant.name}-${variant.versionName}.apk"
                }
            }

            if (project.hasProperty("SIGN_PROPS")
                    && new File(project.property("SIGN_PROPS").toString()).exists()) {
                signingConfig signingConfigs.signConfig
            }

        }
    }

    flavorDimensions "standard"
    productFlavors {
        play {
            dimension "standard"
        }
        foss{
            dimension "standard"
            applicationId project.PACKAGE + ".foss"
        }
    }

    lintOptions {
        abortOnError false
        disable 'MissingTranslation'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    dexOptions {
        preDexLibraries false
    }
}

dependencies {
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-all:1.9.5'
    testImplementation 'org.powermock:powermock:1.6.5'
    testImplementation 'org.powermock:powermock-module-junit4:1.6.5'
    testImplementation 'org.powermock:powermock-api-mockito:1.6.5'

    androidTestImplementation 'com.android.support.test:runner:0.5'
    androidTestImplementation 'com.android.support.test:rules:0.5'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:2.2.2'

    implementation fileTree(include: '*.jar', dir: 'libs')
    implementation 'com.github.flavienlaurent.datetimepicker:library:0.0.2'
    implementation 'com.larswerkman:HoloColorPicker:1.4'
    implementation 'com.jakewharton:disklrucache:2.0.2'
    implementation 'de.keyboardsurfer.android.widget:crouton:1.8.4@aar'
    implementation 'com.google.android.apps.dashclock:dashclock-api:2.0.0'
    implementation('ch.acra:acra:4.8.5') {
        exclude group: 'org.json'
    }
    implementation 'com.github.gabrielemariotti.changeloglib:changelog:2.0.0'
    implementation 'be.billington.calendar.recurrencepicker:library:1.1.1'
    implementation 'com.android.support:appcompat-v7:23.4.0'
    implementation 'com.android.support:design:23.4.0'
    implementation 'com.android.support:multidex:1.0.1'

    implementation 'de.greenrobot:eventbus:2.4.0'
    implementation 'com.pushbullet:android-extensions:1.0.4@aar'
    implementation 'com.getbase:floatingactionbutton:1.10.1'
    implementation 'com.nhaarman.listviewanimations:lib-core:3.1.0@aar'
    implementation 'com.nhaarman.listviewanimations:lib-manipulation:3.1.0@aar'
    implementation 'com.github.bumptech.glide:glide:3.6.1'
    implementation('com.github.afollestad.material-dialogs:core:0.8.5.6@aar') {
        transitive = true
    }
    implementation('com.github.afollestad.material-dialogs:commons:0.8.5.6@aar') {
        transitive = true
    }
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.5.1'
    implementation ('com.jakewharton:butterknife:8.5.1'){
        exclude group: 'com.android.support'
    }
    implementation('org.mnode.ical4j:ical4j:1.0.6') {
        exclude group: 'commons.io'
    }
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.5'
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.5'
    testImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.5'
    implementation 'com.pnikosis:materialish-progress:1.5'
    implementation 'com.github.paolorotolo:appintro:1.3.0'
    implementation 'io.reactivex:rxandroid:1.0.1'
    implementation 'io.reactivex:rxjava:1.0.14'
    implementation 'com.artemzin.rxjava:proguard-rules:1.0.14.2'
    implementation 'com.tbruyelle.rxpermissions:rxpermissions:0.4.2@aar'
    implementation 'org.ocpsoft.prettytime:prettytime:3.2.7.Final'

    implementation ('com.github.federicoiosue:SimpleGallery:2.0.0') {
        exclude group: 'com.android.support'
    }
    implementation 'com.github.federicoiosue:Springpad-Importer:1.0.1'
    implementation 'com.github.federicoiosue:Omni-Notes-Commons:1.2.0'
    implementation ('com.github.federicoiosue:checklistview:3.2.1') {
        transitive=false
    }
    implementation 'com.github.federicoiosue:pixlui:2.6'

    // Flavors specific dependecies
    playImplementation 'io.nlopez.smartlocation:library:3.2.4'
    fossImplementation 'com.github.federicoiosue:smart-location-lib:3.2.5'

    playImplementation ('com.github.federicoiosue:analitica:0.0.3:googleAnalyticsRelease@aar'){
        transitive=true
    }
    fossImplementation ('com.github.federicoiosue:analitica:0.0.3:piwikRelease@aar'){
        transitive=true
    }
    playImplementation 'com.google.android.gms:play-services-analytics:9.0.2'
    fossImplementation ('org.piwik.sdk:piwik-sdk:1.0.2'){
        exclude group: 'com.jakewharton.timber', module: 'timber'
    }
    fossImplementation 'com.jakewharton.timber:timber:4.5.1'

    testImplementation 'junit:junit:4.12'
    implementation 'com.android.support:support-v4:23.4.0'
}

configurations.all {
    exclude group: 'commons-logging', module: 'commons-logging'
    resolutionStrategy.force 'com.android.support:support-annotations:24.0.0'
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        def requested = details.requested
        if (requested.group == 'com.android.support') {
            if (!requested.name.startsWith("multidex")) {
                details.useVersion '23.4.0'
            }
        }
    }
}

android.productFlavors.each { flavor ->
    String analyticsUrl = flavor.name == 'foss' && ANALYTICS_PARAMS_FOSS?.trim() ? ANALYTICS_PARAMS_FOSS : ANALYTICS_PARAMS
    flavor.buildConfigField 'String', 'ANALYTICS_PARAMS', '"' + analyticsUrl + '"'
    flavor.buildConfigField 'String', 'CRASH_REPORTING_URL', '"' + CRASH_REPORTING_URL + '"'
    flavor.buildConfigField 'String', 'VERSION_CHECK_URL', '"' + VERSION_CHECK_URL + '"'
    flavor.buildConfigField 'String', 'MAPS_API_KEY', '"' + MAPS_API_KEY + '"'
}



